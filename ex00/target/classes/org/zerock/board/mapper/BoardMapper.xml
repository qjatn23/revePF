<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.board.mapper.BoardMapper">
  
   <!-- 1. 게시판 리스트 조회 쿼리 -->
   <select id="list" resultType="org.zerock.board.vo.BoardVO">
      select no, title, writer, writeDate, hit
      from
      (
         select rownum rnum, no, title, writer, writeDate, hit
         from
         (
            select no, title, writer, writeDate, hit
            from board
            <!-- 검색 조건을 포함한 쿼리 -->
            <include refid="search"></include>
            order by no desc
         )
      )
      where rnum between #{startRow} and #{endRow} <!-- 페이징 처리를 위해 시작과 끝 row 번호로 제한 -->
   </select>
   
   <!-- 2. 게시판 전체 데이터 개수 조회 쿼리 -->
   <select id="getTotalRow" resultType="Long">
      select count(*) 
      from board
      <!-- 검색 조건을 포함한 쿼리 -->
      <include refid="search"></include>
   </select>

   <!-- 3. 게시판 검색 처리 (조건에 맞는 게시글만 조회) -->
   <sql id="search">
      <if test="word != null and word != ''.toString()">
         <!-- 검색어가 있을 때, 'title', 'content', 'writer'에서 해당 단어를 검색 -->
         <trim prefix="where" prefixOverrides="or">
            <if test="key.indexOf('t') >= 0">
               or title like '%' || #{word} || '%' <!-- 제목에서 검색어 찾기 -->
            </if>
            <if test="key.indexOf('c') >= 0">
               or content like '%' || #{word} || '%' <!-- 내용에서 검색어 찾기 -->
            </if>
            <if test="key.indexOf('w') >= 0">
               or writer like '%' || #{word} || '%' <!-- 작성자에서 검색어 찾기 -->
            </if>
         </trim>
      </if>   
   </sql>

   <!-- 4. 게시글 조회 시 조회수 1 증가 쿼리 -->
   <update id="increase">
      update board set hit = hit + 1
      where no = #{no} <!-- 특정 게시글 조회시 조회수 증가 -->
   </update>

   <!-- 5. 게시글 조회 (글 정보 가져오기) 쿼리 -->
   <select id="view" resultType="org.zerock.board.vo.BoardVO">
      select no, title, content, writer, writeDate, hit
      from board
      where no = #{no} <!-- 게시글 번호로 해당 게시글 조회 -->
   </select>

   <!-- 6. 게시글 작성 쿼리 -->
   <insert id="write">
      <!-- BoardVO 객체의 'no'를 시퀀스로 생성하여 'no'에 값 할당 -->
      <selectKey keyProperty="no" resultType="Long" order="BEFORE">
         select board_seq.nextval from dual <!-- board_seq 시퀀스를 사용하여 게시글 번호 생성 -->
      </selectKey>
      insert into board(no, title, content, writer, pw)
      values(#{no}, #{title}, #{content}, #{writer}, #{pw}) <!-- 게시글 정보 삽입 -->
   </insert>

   <!-- 7. 게시글 수정 쿼리 -->
   <update id="update">
      <!-- 특수문자 처리 위한 <![CDATA[]] 사용 -->
      <![CDATA[
      update board
      set title = #{title}, content = #{content}, writer = #{writer}
      where no = #{no} and pw = #{pw} <!-- 게시글 번호와 비밀번호로 게시글 수정 -->
      ]]>
   </update>

   <!-- 8. 게시글 삭제 쿼리 -->
   <delete id="delete">
      delete from board
      where no = #{no} and pw = #{pw} <!-- 게시글 번호와 비밀번호로 게시글 삭제 -->
   </delete>

</mapper>

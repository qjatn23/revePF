<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="org.zerock.notice.mapper.NoticeMapper">

  <!-- 1-1. getTotalRow: 전체 공지사항 수를 조회 -->
  <select id="getTotalRow" resultType="Long">
      select count(*) from notice  <!-- 공지사항 테이블에서 전체 행 수 카운트 -->
      <include refid="period"></include>  <!-- 기간 조건을 동적으로 추가 -->
  </select>

  <!-- 1-2. list: 공지사항 목록 조회 (페이지네이션 적용) -->
  <select id="list" resultType="org.zerock.notice.vo.NoticeVO">
      select
          no, title, startDate, endDate, writeDate  <!-- 공지사항 번호, 제목, 시작일, 종료일, 작성일 조회 -->
      from
      (
          select
              rownum rnum, no, title, startDate, endDate, writeDate  <!-- 페이지네이션을 위한 rownum 추가 -->
          from
              (
              select
                  no, title, startDate, endDate, writeDate  <!-- 공지사항 내용 조회 -->
              from
                  notice  <!-- 공지사항 테이블에서 데이터 조회 -->
              <include refid="period"></include>  <!-- 기간 조건을 동적으로 추가 -->
              order by no desc  <!-- 공지사항 번호 내림차순으로 정렬 -->
              )
      )
      where rnum between #{startRow} and  #{endRow}  <!-- 페이지네이션 범위 설정 -->
  </select>
  
  <!-- 공지기간에 따른 처리: 공지사항의 기간에 따라 조회 조건을 설정 -->
  <sql id="period">
      <trim prefix="where" prefixOverrides="and">
          <!-- 'pre' 기간: 현재 날짜가 공지의 시작일과 종료일 사이에 포함되는 경우 -->
          <if test="period.equals('pre')">
              and trunc(sysdate) between trunc(startDate) and trunc(endDate)
          </if>
          <!-- 'old' 기간: 현재 날짜가 공지의 종료일 이후인 경우 -->
          <if test="period.equals('old')">
              <![CDATA[and trunc(sysdate) > trunc(endDate)]]>  <!-- 종료일 이후 -->
          </if>
          <!-- 'res' 기간: 현재 날짜가 공지의 시작일 이전인 경우 -->
          <if test="period.equals('res')">
              and trunc(sysdate) &lt; trunc(startDate)  <!-- 시작일 이전 -->
          </if>
      </trim>
  </sql>
  <!-- 주석: <![CDATA[와 &lt;를 사용하여 '<' 문자를 표현 -->

  <!-- 2. view: 공지사항 상세 조회 -->
  <select id="view" resultType="org.zerock.notice.vo.NoticeVO">
      select no, title, content, startDate, endDate, writeDate, updateDate  <!-- 공지사항 번호, 제목, 내용, 날짜 등 조회 -->
      from notice where no = #{no}  <!-- 공지사항 번호로 특정 공지사항 조회 -->
  </select>

  <!-- 3. write: 새 공지사항 작성 -->
  <insert id="write">
      <!-- 공지사항 번호를 자동 생성 (sequence 사용) -->
      <selectKey keyProperty="no" resultType="Long" order="BEFORE">
          select notice_seq.nextval from dual  <!-- notice_seq 시퀀스를 사용하여 다음 번호 생성 -->
      </selectKey>
      insert into notice(no, title, content, startDate, endDate)  <!-- 새 공지사항 데이터 삽입 -->
      values(#{no}, #{title}, #{content}, #{startDate}, #{endDate})  <!-- 공지사항 값 삽입 -->
  </insert>

  <!-- 4. update: 기존 공지사항 수정 -->
  <update id="update">
      update notice set
          title = #{title}, content = #{content},  <!-- 제목, 내용 수정 -->
          startDate = #{startDate}, endDate = #{endDate}  <!-- 시작일, 종료일 수정 -->
      where
          no = #{no}  <!-- 공지사항 번호로 해당 공지사항 수정 -->
  </update>

  <!-- 5. delete: 공지사항 삭제 -->
  <delete id="delete">
      delete from notice  <!-- 공지사항 테이블에서 삭제 -->
      where no = #{no}  <!-- 공지사항 번호로 특정 공지사항 삭제 -->
  </delete>

</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.member.mapper.MemberMapper">

  <!-- 일반 로그인: 사용자 ID와 비밀번호를 사용하여 로그인 인증 -->
  <select id="login" resultType="org.zerock.member.vo.LoginVO">
      select
          m.id, m.pw, m.name, m.photo, m.gradeNo, g.gradeName
      from member m, grade g
      where
          (id = #{id} and pw = #{pw})  <!-- ID와 비밀번호 일치 확인 -->
          and
          (m.gradeNo = g.gradeNo)  <!-- 등급 정보 결합 -->
  </select>
  
  <!-- 회원 정보 업데이트: 사용자 정보를 수정 -->
  <update id="updateMember" parameterType="org.zerock.member.vo.LoginVO">
      UPDATE member
      SET name = #{name},  <!-- 이름 수정 -->
          gender = #{gender},  <!-- 성별 수정 -->
          birth = #{birth},  <!-- 생년월일 수정 -->
          tel = #{tel},  <!-- 전화번호 수정 -->
          email = #{email}  <!-- 이메일 수정 -->
      WHERE id = #{id}  <!-- 사용자 ID로 해당 회원 수정 -->
  </update>
  
  <!-- 회원 삭제: 사용자 계정을 삭제 -->
  <delete id="deleteMember" parameterType="string">
      DELETE FROM member WHERE id = #{id}  <!-- 사용자 ID에 해당하는 계정 삭제 -->
  </delete>

  <!-- ID로 비밀번호 조회: 사용자의 비밀번호를 조회 -->
  <select id="getPasswordById" parameterType="String" resultType="String">
      SELECT pw FROM member WHERE id = #{id}  <!-- 사용자 ID에 해당하는 비밀번호 조회 -->
  </select>

  <!-- 카카오 사용자 조회: 카카오로 로그인한 사용자 정보 조회 -->
  <select id="findByKakaoId" resultType="org.zerock.member.vo.LoginVO">
      select * from member
      where id = #{kakaoId} and loginType = 'kakao'  <!-- 카카오 ID로 로그인한 사용자 조회 -->
  </select>

  <!-- 새로운 카카오 사용자 저장: 카카오 사용자 정보를 데이터베이스에 저장 -->
  <insert id="insertKakaoUser">
      insert into member(id, pw, name, email, gender, birth, loginType)
      values (#{id}, '1111', #{name}, #{email, jdbcType=VARCHAR}, 'U', TO_DATE('1900-01-01', 'YYYY-MM-DD'), 'kakao')  <!-- 카카오 사용자 기본 정보 저장 -->
  </insert>
  
  <!-- 네이버 사용자 조회: 네이버로 로그인한 사용자 정보 조회 -->
  <select id="findByNaverId" resultType="org.zerock.member.vo.LoginVO">
      SELECT * FROM member
      WHERE id = #{naverId} AND loginType = 'naver'  <!-- 네이버 ID로 로그인한 사용자 조회 -->
  </select>

  <!-- 새로운 네이버 사용자 저장: 네이버 사용자 정보를 데이터베이스에 저장 -->
  <insert id="insertNaverUser">
      INSERT INTO member (id, pw, name, email, gender, birth, loginType)
      VALUES (#{id}, '1111', #{name}, #{email}, 'U', TO_DATE('1900-01-01', 'YYYY-MM-DD'), 'naver')  <!-- 네이버 사용자 기본 정보 저장 -->
  </insert>

  <!-- 새 회원 가입: 새로운 회원을 데이터베이스에 추가 -->
  <insert id="write">
      insert into member(id, pw, name, gender, email, birth, tel)
      values (#{id}, #{pw}, #{name}, #{gender}, #{email}, #{birth}, #{tel})  <!-- 사용자 정보 삽입 -->
  </insert>
  
  <!-- 회원 목록 조회: 페이지네이션을 적용하여 회원 목록을 조회 -->
  <select id="list" resultType="org.zerock.member.vo.LoginVO">
      select id, name, birth, tel, gradeNo, gradeName, status 
      from (
          select rownum rnum, id, name, birth, tel, gradeNo, gradeName, status 
          from (
              select m.id, m.name, m.birth, m.tel, m.gradeNo, g.gradeName, m.status 
              from member m, grade g 
              where m.gradeNo = g.gradeNo 
              order by id asc  <!-- ID 순으로 정렬 -->
          )
      )
      where rnum between #{startRow} and #{endRow}  <!-- 페이지네이션 범위 지정 -->
  </select>
  
  <!-- 전체 회원 수 조회: 회원의 총 수를 조회 -->
  <select id="getTotalRow" resultType="Long">
      select count(*)
      from member
      <include refid="search"></include>  <!-- 검색 조건 추가 -->
  </select>
  
  <!-- 검색 조건: 검색어를 포함한 조건을 추가 -->
  <sql id="search">
      <if test="word != null and word != ''.toString()">
          <trim prefix="where" prefixOverrides="or">
              <if test="key.indexOf('t') >= 0">
                  or title like '%' || #{word} || '%'  <!-- 제목에서 검색어 포함 -->
              </if>
              <if test="key.indexOf('c') >= 0">
                  or content like '%' || #{word} || '%'  <!-- 내용에서 검색어 포함 -->
              </if>
              <if test="key.indexOf('w') >= 0">
                  or writer like '%' || #{word} || '%'  <!-- 작성자에서 검색어 포함 -->
              </if>
          </trim> 
      </if>   
  </sql>
  
  <!-- 회원 상세 조회: 특정 회원의 상세 정보를 조회 -->
  <select id="view" resultType="org.zerock.member.vo.LoginVO">
      select m.id, m.pw, m.name, m.gender,
      m.birth, m.tel, m.email,
      m.regDate,
      m.conDate,
      m.gradeNo, g.gradeName, m.status
      from member m, grade g
      where (id = #{id}) and (m.gradeNo = g.gradeNo)  <!-- 사용자 ID에 해당하는 상세 정보 조회 -->
  </select>
  
  <!-- 회원 상태 변경: 회원의 상태를 변경 -->
  <update id="changeStatus">
      update member
      set status = #{status} where id = #{id}  <!-- 사용자 ID로 상태 변경 -->
  </update>
  
  <!-- 회원 등급 변경: 회원의 등급을 변경 -->
  <update id="changeGradeNo">
      update member
      set gradeNo = #{gradeNo} where id = #{id}  <!-- 사용자 ID로 등급 번호 변경 -->
  </update>
  
  <!-- 회원 정보 수정: 회원 정보를 수정 -->
  <update id="update">
      update member
      set name = #{name}, gender = #{gender}, birth = #{birth},
      tel = #{tel}, email = #{email}
      where (id = #{id}) and (pw = #{pw})  <!-- ID와 비밀번호로 회원 정보 수정 -->
  </update>
  
  <!-- 회원 탈퇴: 회원의 상태를 '탈퇴'로 변경 -->
  <update id="delete">
      update member
      set status = '탈퇴'
      where id = #{id} and pw = #{pw}  <!-- ID와 비밀번호로 탈퇴 처리 -->
  </update>
  
  <!-- 회원 가입일 수정: 사용자 가입일을 수정 -->
  <update id="conUpdate">
      update member
      set conDate = sysDate where id = #{id}  <!-- 사용자 가입일을 현재 날짜로 수정 -->
  </update>

</mapper>
